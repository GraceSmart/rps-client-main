{"remainingRequest":"/Users/gracesmart/Desktop/rps-client-main/node_modules/babel-loader/lib/index.js!/Users/gracesmart/Desktop/rps-client-main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gracesmart/Desktop/rps-client-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gracesmart/Desktop/rps-client-main/src/components/Speech.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gracesmart/Desktop/rps-client-main/src/components/Speech.vue","mtime":1624639572000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Speech.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAA,KAAA,EAAA,MAAA,kBAAA;AACA,OAAA,KAAA,cAAA,MAAA,oCAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,KADA;AAEA,MAAA,WAAA,EAAA,EAFA;AAGA,MAAA,qBAAA,EAAA,EAHA;AAIA,MAAA,YAAA,EAAA,EAJA;AAKA,MAAA,WAAA,EAAA;AALA,KAAA;AAOA,GAVA;AAWA,EAAA,KAAA,EAAA;AACA,IAAA,WAAA,EAAA,qBAAA,QAAA,EAAA;AACA,UAAA,KAAA,UAAA,EAAA;AACA,aAAA,eAAA,CAAA,QAAA;AACA;AACA;AALA,GAXA;AAkBA,EAAA,QAAA,EAAA;AACA,IAAA,iBADA,+BACA;AACA,UAAA,WAAA,sBAAA,KAAA,WAAA,CAAA;;AACA,MAAA,WAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AACA,eAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,KAAA;AACA,OAFA;AAGA,aAAA,WAAA;AACA,KAPA;AAQA,IAAA,aARA,2BAQA;AACA,UAAA,KAAA,iBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,eAAA,KAAA,iBAAA,CAAA,CAAA,CAAA;AACA,OAFA,MAGA;AACA,eAAA,IAAA;AACA;AACA,KAfA;AAgBA,IAAA,yBAhBA,uCAgBA;AACA,UAAA,CAAA,GAAA,KAAA,aAAA;AACA,aAAA,KAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,CAAA;AAAA,eAAA,CAAA,IAAA,CAAA;AAAA,OAAA,CAAA;AACA;AAnBA,GAlBA;AAuCA,EAAA,OAvCA,qBAuCA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,cAAA,EAAA,CAAA,UAAA,CAAA,OAAA;AACA,cAAA,iBAFA,GAEA,SAAA,CAAA,YAAA,CAAA,gBAAA,EAFA;AAGA,cAAA,iBAAA,CAAA,IAAA;AAAA,mFAAA,iBAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAA,OAAA,CAAA,OAAA,CAAA,UAAA,MAAA,EAAA;AACA,gCAAA,MAAA,CAAA,IAAA,KAAA,YAAA,EAAA;AACA,8BAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA;AACA;AACA,2BAJA;AAKA,0BAAA,KAAA,CAAA,WAAA,GAAA,KAAA,CAAA,YAAA,CAAA,CAAA,EAAA,QAAA;AANA;AAAA,iCAOA,KAAA,CAAA,WAAA,EAPA;;AAAA;AAOA,0BAAA,KAAA,CAAA,UAPA;AAQA,0BAAA,KAAA,CAAA,WAAA,GAAA,KAAA,CAAA,UAAA,CAAA,UAAA,EAAA,CARA,CAQA;;AAEA,0BAAA,KAAA,CAAA,eAAA,CAAA,KAAA,CAAA,WAAA;;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAA;;AAAA;AAAA;AAAA;AAAA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA,GAtDA;AAuDA,EAAA,aAvDA,2BAuDA;AACA,QAAA,KAAA,UAAA,EAAA;AACA,WAAA,UAAA,CAAA,aAAA;AACA;AACA,GA3DA;AA4DA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,2BACA,QADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACA,MAAA,CAAA,UAAA,CAAA,WAAA,EADA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEA,MAAA,CAAA,UAAA,CAAA,aAAA,EAFA;;AAAA;AAAA;AAAA,uBAOA,MAAA,CAAA,UAAA,CAAA,MAAA,CAAA,UAAA,MAAA,EAAA;AACA,kBAAA,MAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,MAAA;AACA,iBAFA,EAEA;AACA,kBAAA,kBAAA,EAAA,KADA;AACA;AACA,kBAAA,oBAAA,EAAA,IAFA;AAGA,kBAAA,+BAAA,EAAA,IAHA;AAIA,kBAAA,aAAA,EAAA,GAJA;AAIA;AACA,kBAAA,qBAAA,EAAA;AACA,oBAAA,QAAA,EAAA;AADA;AALA,iBAFA,CAPA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA,KAnBA;AAoBA,IAAA,WApBA,yBAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,OADA,aACA,QAAA,CAAA,QADA,eACA,QAAA,CAAA,IADA;AAEA,gBAAA,aAFA,aAEA,OAFA;AAGA,gBAAA,WAHA,aAGA,OAHA;AAIA,gBAAA,UAJA,GAIA,cAAA,CAAA,MAAA,CACA,aADA,EAEA,SAFA,EAGA,aAHA,EAIA,WAJA,CAJA,EASA;;AATA;AAAA,uBAUA,UAAA,CAAA,iBAAA,EAVA;;AAAA;AAAA,kDAWA,UAXA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA,KAhCA;AAiCA,IAAA,iBAjCA,6BAiCA,WAjCA,EAiCA;AAAA;;AACA,WAAA,WAAA,CAAA,MAAA,GAAA,CAAA;AAEA,MAAA,WAAA,CAAA,OAAA,CAAA,UAAA,UAAA,EAAA,KAAA,EAAA;AACA,QAAA,MAAA,CAAA,WAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,EAAA,MAAA,CAAA,WAAA,CAAA,KAAA,CADA;AAEA,UAAA,KAAA,EAAA,CAAA,UAAA,GAAA,GAAA,EAAA,OAAA,CAAA,CAAA;AAFA,SAAA;AAIA,OALA;AAMA,UAAA,IAAA,GAAA,KAAA,aAAA;;AACA,UAAA,IAAA,CAAA,IAAA,KAAA,kBAAA,EAAA;AACA,aAAA,KAAA,CAAA,MAAA,EAAA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA;AACA;AACA;AA9CA;AA5DA,CAAA","sourcesContent":["<template>\n  <v-card-text>\n    <v-select\n      :items=\"audioDevices\"\n      v-model=\"audioDevice\"\n      item-text=\"label\"\n      item-value=\"deviceId\"\n    />\n    <v-simple-table>\n      <tbody>\n      <tr v-if=\"topPrediction != null\">\n        <td>{{ topPrediction.name }}</td>\n        <td>{{ topPrediction.score }} %</td>\n      </tr>\n      <tr v-else>\n        <td>Not sure...</td>\n      </tr>\n      <tr v-for=\"(prediction, index) in filteredSortedPredictions\" v-bind:key=\"index\">\n        <td>{{prediction.name}}</td>\n        <td>{{prediction.score}} %</td>\n      </tr>\n      </tbody>\n    </v-simple-table>\n  </v-card-text>\n</template>\n\n<script>\nimport * as tf from '@tensorflow/tfjs'\nimport * as speechCommands from '@tensorflow-models/speech-commands'\nexport default {\n  name: 'App',\n  data () {\n    return {\n      isModelReady: false,\n      predictions: [],\n      audioTrackConstraints: {},\n      audioDevices: [],\n      audioDevice: ''\n    }\n  },\n  watch: {\n    audioDevice: function (deviceId) {\n      if (this.recognizer) {\n        this.setupRecognizer(deviceId)\n      }\n    }\n  },\n  computed: {\n    sortedPredictions () {\n      const predictions = [...this.predictions]\n      predictions.sort((a, b) => {\n        return (b.score - a.score)\n      })\n      return predictions\n    },\n    topPrediction () {\n      if (this.sortedPredictions.length > 0) {\n        return this.sortedPredictions[0]\n      }\n      else {\n        return null\n      }\n    },\n    filteredSortedPredictions () {\n      const t = this.topPrediction\n      return this.sortedPredictions.filter(p => p != t)\n    }\n  },\n  async mounted () {\n    tf.setBackend('webgl')\n    const enumeratorPromise = navigator.mediaDevices.enumerateDevices()\n    enumeratorPromise.then(async devices => {\n      devices.forEach(device => {\n        if (device.kind === 'audioinput') {\n          this.audioDevices.push(device)\n        }\n      })\n      this.audioDevice = this.audioDevices[0].deviceId\n      this.recognizer = await this.createModel()\n      this.classLabels = this.recognizer.wordLabels() // get class labels\n      \n      this.setupRecognizer(this.audioDevice)\n    })\n  },\n  beforeDestroy() {\n    if (this.recognizer) {\n      this.recognizer.stopListening()\n    }\n  },\n  methods: {\n    async setupRecognizer (deviceId) {\n      if (this.recognizer.isListening()) {\n        await this.recognizer.stopListening()\n      }\n      // listen() takes two arguments:\n      // 1. A callback function that is invoked anytime a word is recognized.\n      // 2. A configuration object with adjustable fields\n      await this.recognizer.listen(result => {\n        this.handlePredictions(result.scores)\n      }, {\n          includeSpectrogram: false, // in case listen should return result.spectrogram\n          probabilityThreshold: 0.75,\n          invokeCallbackOnNoiseAndUnknown: true,\n          overlapFactor: 0.5, // probably want between 0.5 and 0.75. More info in README\n          audioTrackConstraints: {\n            deviceId: deviceId\n          }\n      })\n    },\n    async createModel() {\n        const baseURL = `${location.protocol}//${location.host}`\n        const checkpointURL = `${baseURL}/speech/model.json`\n        const metadataURL = `${baseURL}/speech/metadata.json`\n        const recognizer = speechCommands.create(\n            'BROWSER_FFT',\n            undefined,\n            checkpointURL,\n            metadataURL)\n        // check that model and metadata are loaded via HTTPS requests.\n        await recognizer.ensureModelLoaded()\n        return recognizer\n    },\n    handlePredictions (predictions) {\n        this.predictions.length = 0\n        \n        predictions.forEach((prediction, index) => {\n            this.predictions.push({\n              name: this.classLabels[index],\n              score: (prediction * 100).toFixed(1)\n            })\n        })\n        const pred = this.topPrediction\n        if (pred.name !== 'Background Noise') {\n          this.$emit('word', pred.name.toLowerCase())\n        }\n    }\n  }\n}\n</script>\n\n<style>\n.app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n  margin-top: 60px;\n}\ntable {\n  width: 100%;\n  border-spacing: 5px;\n}\n.margin-10 {\n  margin: 10px;\n}\n.top-row {\n  background-color: rgba(0, 200, 0, 0.1);\n  height: 40px;\n  font-weight: 900;\n}\n.other-rows {\n  background-color: rgba(200, 0, 0, 0.1);\n  height: 30px;\n  font-weight: 400;\n}\ntd {\n  padding: 5px;\n}\ntd:nth-child(1) {\n  width: 70%;\n    text-align: left;\n}\ntd:nth-child(2) {\n  width: 30%;\n  text-align: center;\n}\n.center-container {\n  width: 600px;\n  margin: 0 auto;\n}\n.device-select {\n  width: 100%;\n}\n</style>"],"sourceRoot":"src/components"}]}