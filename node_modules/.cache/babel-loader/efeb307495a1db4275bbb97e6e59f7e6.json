{"remainingRequest":"/Users/gracesmart/Desktop/rps-client-main/node_modules/babel-loader/lib/index.js!/Users/gracesmart/Desktop/rps-client-main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gracesmart/Desktop/rps-client-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gracesmart/Desktop/rps-client-main/src/components/Gesture.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gracesmart/Desktop/rps-client-main/src/components/Gesture.vue","mtime":1624639519000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gracesmart/Desktop/rps-client-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9ncmFjZXNtYXJ0L0Rlc2t0b3AvcnBzLWNsaWVudC1tYWluL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgKiBhcyB0ZiBmcm9tICJAdGVuc29yZmxvdy90ZmpzIjsKaW1wb3J0ICogYXMgdG1JbWFnZSBmcm9tICJAdGVhY2hhYmxlbWFjaGluZS9pbWFnZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQXBwIiwKICBjb21wb25lbnRzOiB7fSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdmlkZW9EZXZpY2U6ICIiLAogICAgICBkZXZpY2VzOiBbXSwKICAgICAgYmFzZU1vZGVsOiAibW9iaWxlbmV0X3YyIiwKICAgICAgaXNNb2RlbFJlYWR5OiBmYWxzZSwKICAgICAgcHJlZGljdGlvbnM6IFt7CiAgICAgICAgbmFtZTogJ1JvY2snLAogICAgICAgIHNjb3JlOiAwCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAnUGFwZXInLAogICAgICAgIHNjb3JlOiAwCiAgICAgIH0sIHsKICAgICAgICBuYW1lOiAnU2Npc3NvcnMnLAogICAgICAgIHNjb3JlOiAwCiAgICAgIH1dLAogICAgICBsYXN0UHJlZGljdGlvbjogIiIKICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0Zi5zZXRCYWNrZW5kKCJ3ZWJnbCIpOwogICAgdGhpcy5saXN0VmlkZW9EZXZpY2VzKCkudGhlbihmdW5jdGlvbiAodmlkZW9EZXZpY2VzKSB7CiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih2aWRlb0RldmljZXMpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgZGV2aWNlID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgX3RoaXMuZGV2aWNlcy5wdXNoKGRldmljZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIF90aGlzLnZpZGVvRGV2aWNlID0gdmlkZW9EZXZpY2VzWzBdLmRldmljZUlkOwogICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBfdGhpcy5pbml0V2ViY2FtU3RyZWFtKCk7CiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF90aGlzLmxvYWRNb2RlbCgpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLmRldGVjdE9iamVjdHMoKTsKICAgICAgfSk7CiAgICB9KTsKICB9LAogIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7CiAgICBpZiAodGhpcy5yYWYpIHsKICAgICAgdmFyIHZpZGVvID0gdGhpcy4kcmVmcy52aWRlbzsKICAgICAgdmlkZW8ucGF1c2UoKTsKICAgICAgdmlkZW8uc3JjT2JqZWN0ID0gbnVsbDsKICAgICAgdGhpcy5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbiAodHJhY2spIHsKICAgICAgICB0cmFjay5zdG9wKCk7CiAgICAgIH0pOwogICAgICB0aGlzLmlzVmlkZW9TdHJlYW1SZWFkeSA9IGZhbHNlOwogICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnJhZik7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBsaXN0VmlkZW9EZXZpY2VzOiBmdW5jdGlvbiBsaXN0VmlkZW9EZXZpY2VzKCkgewogICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkudGhlbihmdW5jdGlvbiAoZGV2aWNlcykgewogICAgICAgIHJldHVybiBkZXZpY2VzLmZpbHRlcihmdW5jdGlvbiAoZGV2aWNlKSB7CiAgICAgICAgICByZXR1cm4gZGV2aWNlLmtpbmQgPT09ICJ2aWRlb2lucHV0IjsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgaW5pdFdlYmNhbVN0cmVhbTogZnVuY3Rpb24gaW5pdFdlYmNhbVN0cmVhbSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLmlzVmlkZW9TdHJlYW1SZWFkeSA9IGZhbHNlOyAvLyBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBtZWRpYURldmljZXMuZ2V0VXNlck1lZGlhIEFQSQoKICAgICAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgJiYgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpIHsKICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoewogICAgICAgICAgdmlkZW86IHsKICAgICAgICAgICAgZGV2aWNlSWQ6IHRoaXMudmlkZW9EZXZpY2UKICAgICAgICAgIH0KICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHsKICAgICAgICAgIF90aGlzMi5zdHJlYW0gPSBzdHJlYW07IC8vIHNldCA8dmlkZW8+IHNvdXJjZSBhcyB0aGUgd2ViY2FtIGlucHV0CgogICAgICAgICAgdmFyIHZpZGVvID0gX3RoaXMyLiRyZWZzLnZpZGVvOwogICAgICAgICAgdmlkZW8uc3JjT2JqZWN0ID0gX3RoaXMyLnN0cmVhbTsKICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICAvLyB3aGVuIHZpZGVvIGlzIGxvYWRlZAogICAgICAgICAgICB2aWRlby5vbmxvYWRlZG1ldGFkYXRhID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgdmlkZW8gcmF0aW8KICAgICAgICAgICAgICBfdGhpczIudmlkZW9SYXRpbyA9IHZpZGVvLnZpZGVvSGVpZ2h0IC8gdmlkZW8udmlkZW9XaWR0aDsgLy8gYWRkIGV2ZW50IGxpc3RlbmVyIG9uIHJlc2l6ZSB0byByZXNldCB0aGUgPHZpZGVvPiBhbmQgPGNhbnZhcz4gc2l6ZXMKCiAgICAgICAgICAgICAgX3RoaXMyLmlzVmlkZW9TdHJlYW1SZWFkeSA9IHRydWU7CiAgICAgICAgICAgICAgdmlkZW8ucGxheSgpOwogICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgfTsKICAgICAgICAgIH0pOwogICAgICAgIH0pIC8vIGVycm9yIGhhbmRsaW5nCiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgY29uc29sZS5sb2coImZhaWxlZCB0byBpbml0aWFsaXplIHdlYmNhbSBzdHJlYW0iLCBlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBsb2FkTW9kZWw6IGZ1bmN0aW9uIGxvYWRNb2RlbCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gdG1JbWFnZS5sb2FkKCIvZ2VzdHVyZS9tb2RlbC5qc29uIiwgIi9nZXN0dXJlL21ldGFkYXRhLmpzb24iKS50aGVuKGZ1bmN0aW9uIChtb2RlbCkgewogICAgICAgIF90aGlzMy5tb2RlbCA9IG1vZGVsOwogICAgICAgIF90aGlzMy5pc01vZGVsUmVhZHkgPSB0cnVlOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmxvZygiZmFpbGVkIHRvIGxvYWQgdGhlIG1vZGUiLCBlcnJvcik7CiAgICAgICAgdGhyb3cgZXJyb3I7CiAgICAgIH0pOwogICAgfSwKICAgIGRldGVjdE9iamVjdHM6IGZ1bmN0aW9uIGRldGVjdE9iamVjdHMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLmlzTW9kZWxSZWFkeSkgcmV0dXJuOwoKICAgICAgaWYgKHRoaXMuaXNWaWRlb1N0cmVhbVJlYWR5KSB7CiAgICAgICAgdGhpcy5tb2RlbC5wcmVkaWN0KHRoaXMuJHJlZnMudmlkZW8pLnRoZW4oZnVuY3Rpb24gKHByZWRpY3Rpb25zKSB7CiAgICAgICAgICBfdGhpczQuaGFuZGxlUHJlZGljdGlvbnMocHJlZGljdGlvbnMpOwoKICAgICAgICAgIF90aGlzNC5yYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczQuZGV0ZWN0T2JqZWN0cygpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5yYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXM0LmRldGVjdE9iamVjdHMoKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGhhbmRsZVByZWRpY3Rpb25zOiBmdW5jdGlvbiBoYW5kbGVQcmVkaWN0aW9ucyhwcmVkaWN0aW9ucykgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMucHJlZGljdGlvbnMuc3BsaWNlKDApOwogICAgICB2YXIgbWF4UHJlZGljdGlvbjsKICAgICAgdmFyIG1heFByb2IgPSAwOwogICAgICBwcmVkaWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVkaWN0aW9uKSB7CiAgICAgICAgX3RoaXM1LnByZWRpY3Rpb25zLnB1c2goewogICAgICAgICAgbmFtZTogcHJlZGljdGlvbi5jbGFzc05hbWUsCiAgICAgICAgICBzY29yZTogKHByZWRpY3Rpb24ucHJvYmFiaWxpdHkgKiAxMDApLnRvRml4ZWQoMSkKICAgICAgICB9KTsKCiAgICAgICAgaWYgKHByZWRpY3Rpb24ucHJvYmFiaWxpdHkgPiBtYXhQcm9iKSB7CiAgICAgICAgICBtYXhQcm9iID0gcHJlZGljdGlvbi5wcm9iYWJpbGl0eTsKICAgICAgICAgIG1heFByZWRpY3Rpb24gPSBwcmVkaWN0aW9uOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBpZiAodGhpcy5sYXN0UHJlZGljdGlvbiAhPSBtYXhQcmVkaWN0aW9uLmNsYXNzTmFtZSkgewogICAgICAgIHRoaXMubGFzdFByZWRpY3Rpb24gPSBtYXhQcmVkaWN0aW9uLmNsYXNzTmFtZTsKCiAgICAgICAgaWYgKHRoaXMudGltZW91dCkgewogICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmIChfdGhpczUubGFzdFByZWRpY3Rpb24gIT0gJ05vdGhpbmcnKSB7CiAgICAgICAgICAgIF90aGlzNS4kZW1pdCgnZ2VzdHVyZScsIF90aGlzNS5sYXN0UHJlZGljdGlvbi50b0xvd2VyQ2FzZSgpKTsKICAgICAgICAgIH0KICAgICAgICB9LCAxNTAwKTsKICAgICAgfQogICAgfQogIH0KfTs="},{"version":3,"sources":["Gesture.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card-text>\n    <v-select\n      :items=\"devices\"\n      v-model=\"videoDevice\"\n      item-text=\"label\"\n      item-value=\"deviceId\"\n    />\n    <video ref=\"video\"></video>\n    <div>\n      <table>\n        <tr v-for=\"(prediction, index) in predictions\" v-bind:key=\"index\">\n          <td>\n            <label :for=\"prediction.name\">{{ prediction.name }}</label>\n          </td>\n          <td>\n            <meter\n              :id=\"prediction.name\"\n              :value=\"prediction.score\"\n              min=\"0\"\n              max=\"100\"\n            />\n          </td>\n        </tr>\n      </table>\n    </div>\n  </v-card-text>\n</template>\n\n<script>\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as tmImage from \"@teachablemachine/image\";\nexport default {\n  name: \"App\",\n  components: {},\n  data() {\n    return {\n      videoDevice: \"\",\n      devices: [],\n      baseModel: \"mobilenet_v2\",\n      isModelReady: false,\n      predictions: [\n        { name: 'Rock', score: 0 },\n        { name: 'Paper', score: 0 },\n        { name: 'Scissors', score: 0 }\n      ],\n      lastPrediction: \"\",\n    };\n  },\n  mounted() {\n    tf.setBackend(\"webgl\");\n    this.listVideoDevices()\n      .then((videoDevices) => {\n        for (let device of videoDevices) {\n          this.devices.push(device);\n        }\n        this.videoDevice = videoDevices[0].deviceId;\n      })\n      .then(() => {\n        return this.initWebcamStream();\n      })\n      .then(() => {\n        return this.loadModel().then(() => {\n          this.detectObjects();\n        });\n      });\n  },\n  beforeDestroy() {\n    if (this.raf) {\n      let video = this.$refs.video\n      video.pause()\n      video.srcObject = null\n      \n      this.stream.getTracks().forEach(track => {\n        track.stop()\n      })\n      this.isVideoStreamReady = false\n      cancelAnimationFrame(this.raf)\n    }\n  },\n  methods: {\n    listVideoDevices() {\n      return navigator.mediaDevices.enumerateDevices().then((devices) => {\n        return devices.filter((device) => device.kind === \"videoinput\");\n      });\n    },\n    initWebcamStream() {\n      this.isVideoStreamReady = false;\n      // if the browser supports mediaDevices.getUserMedia API\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        return (\n          navigator.mediaDevices\n            .getUserMedia({\n              video: { deviceId: this.videoDevice },\n            })\n            .then((stream) => {\n              this.stream = stream\n              // set <video> source as the webcam input\n              let video = this.$refs.video\n              video.srcObject = this.stream;\n              return new Promise((resolve) => {\n                // when video is loaded\n                video.onloadedmetadata = () => {\n                  // calculate the video ratio\n                  this.videoRatio = video.videoHeight / video.videoWidth;\n                  // add event listener on resize to reset the <video> and <canvas> sizes\n                  this.isVideoStreamReady = true;\n                  video.play()\n                  resolve();\n                };\n              });\n            })\n            // error handling\n            .catch((error) => {\n              console.log(\"failed to initialize webcam stream\", error);\n            })\n        );\n      }\n    },\n    loadModel() {\n      return tmImage\n        .load(\"/gesture/model.json\", \"/gesture/metadata.json\")\n        .then((model) => {\n          this.model = model;\n          this.isModelReady = true;\n        })\n        .catch((error) => {\n          console.log(\"failed to load the mode\", error);\n          throw error;\n        });\n    },\n    detectObjects() {\n      if (!this.isModelReady) return;\n      if (this.isVideoStreamReady) {\n        this.model.predict(this.$refs.video).then((predictions) => {\n          this.handlePredictions(predictions);\n          this.raf = requestAnimationFrame(() => {\n            this.detectObjects();\n          });\n        });\n      } else {\n        this.raf = requestAnimationFrame(() => {\n          this.detectObjects();\n        });\n      }\n    },\n    handlePredictions(predictions) {\n      this.predictions.splice(0);\n      let maxPrediction;\n      let maxProb = 0;\n      predictions.forEach((prediction) => {\n        this.predictions.push({\n          name: prediction.className,\n          score: (prediction.probability * 100).toFixed(1),\n        });\n        if (prediction.probability > maxProb) {\n          maxProb = prediction.probability;\n          maxPrediction = prediction;\n        }\n      });\n      if (this.lastPrediction != maxPrediction.className) {\n        this.lastPrediction = maxPrediction.className;\n        if (this.timeout) {\n          clearTimeout(this.timeout)\n        }\n        this.timeout = setTimeout(() => {\n          if (this.lastPrediction != 'Nothing') {\n            this.$emit('gesture', this.lastPrediction.toLowerCase())\n          }\n        }, 1500)\n      }\n    },\n  },\n};\n</script>\n\n<style>\nvideo {\n  width: 100%;\n}\n</style>"],"sourceRoot":"src/components"}]}